/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TaskRouteImport } from './routes/task'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TaskTaskIdRouteImport } from './routes/task.$taskId'
import { Route as ProfileEditRouteImport } from './routes/profile.edit'

const TaskRoute = TaskRouteImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TaskTaskIdRoute = TaskTaskIdRouteImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => TaskRoute,
} as any)
const ProfileEditRoute = ProfileEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProfileRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/settings': typeof SettingsRoute
  '/task': typeof TaskRouteWithChildren
  '/profile/edit': typeof ProfileEditRoute
  '/task/$taskId': typeof TaskTaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/settings': typeof SettingsRoute
  '/task': typeof TaskRouteWithChildren
  '/profile/edit': typeof ProfileEditRoute
  '/task/$taskId': typeof TaskTaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/settings': typeof SettingsRoute
  '/task': typeof TaskRouteWithChildren
  '/profile/edit': typeof ProfileEditRoute
  '/task/$taskId': typeof TaskTaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/settings'
    | '/task'
    | '/profile/edit'
    | '/task/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/settings'
    | '/task'
    | '/profile/edit'
    | '/task/$taskId'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/settings'
    | '/task'
    | '/profile/edit'
    | '/task/$taskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  TaskRoute: typeof TaskRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/task': {
      id: '/task'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof TaskRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/task/$taskId': {
      id: '/task/$taskId'
      path: '/$taskId'
      fullPath: '/task/$taskId'
      preLoaderRoute: typeof TaskTaskIdRouteImport
      parentRoute: typeof TaskRoute
    }
    '/profile/edit': {
      id: '/profile/edit'
      path: '/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof ProfileEditRouteImport
      parentRoute: typeof ProfileRoute
    }
  }
}

interface ProfileRouteChildren {
  ProfileEditRoute: typeof ProfileEditRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileEditRoute: ProfileEditRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

interface TaskRouteChildren {
  TaskTaskIdRoute: typeof TaskTaskIdRoute
}

const TaskRouteChildren: TaskRouteChildren = {
  TaskTaskIdRoute: TaskTaskIdRoute,
}

const TaskRouteWithChildren = TaskRoute._addFileChildren(TaskRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRouteWithChildren,
  SettingsRoute: SettingsRoute,
  TaskRoute: TaskRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
